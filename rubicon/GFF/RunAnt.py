import glob
from topology import AC, TopMol
from lamppsio import LMPInput

__author__ = 'navnidhirajput'

from Antechamber_wrapper import Antechamber
from pymatgen.core.structure import Molecule
from GFF import GFF, GFF_library


coords = [[0.000000, 0.000000, 0.000000],
          [0.000000, 0.000000, 1.089000],
          [1.026719, 0.000000, -0.363000],
          [-0.513360, -0.889165, -0.363000],
          [-0.513360, 0.889165, -0.363000]]

coords1 = [[2.439852592, -0.695560517, -0.059660824],
           [1.215789897, -1.364471113, -0.035273969],
           [0.006178611, -0.680052792, -0.033906341],
           [0.011432936, 0.736021177, -0.04523679],
           [1.244501499, 1.412040006, -0.073274723],
           [2.446426478, 0.695310046, -0.032857094],
           [1.197599275, -2.451378243, -0.021485707],
           [3.387001913, 1.235096154, 0.026641733],
           [-2.291988347, 0.715581207, -0.026151],
           [-2.289998326, -0.662369562, -0.008671972],
           [-3.215496455, 1.282918736, -0.023663871],
           [-3.211335899, -1.233000313, 0.009662803],
           [-1.151603286, 1.437111014, -0.04771053],
           [-1.147520606, -1.381134987, -0.0136565071],
           [3.633832306, -1.424386617, 0.039840294],
           [3.721097543, -1.873962237, 0.949467681],
           [4.463123007, -0.872224014, -0.160434368],
           [1.285632406, 2.82422801, 0.069252241],
           [0.37592053, 3.218997493, -0.180146967],
           [2.059832605, 3.263215412, -0.415601215]]

mol1 = Molecule(["C", "H", "H", "H", "H"], coords)

mol2 = Molecule(
    ["C", "C", "C", "C", "C", "C", "H", "H", "C", "C", "H", "H", "N", "N", "N",
     "H", "H", "N", "H", "H"], coords1)
#['C'] * 5  + ["H"] * 10



mols = [mol2]

"""

making pdb file for molecules,running antechamber
parsing the output to GFF class to read force field parameters
and cleaning all the files generated by antechamber.
"""

gff_list = []
for mol in mols:
    my_ant = Antechamber(mol)
    my_ant.convert_to_pdb(mol, 'mol.pdb')
    my_ant.run_antechamber('mol.pdb')
    my_ant.run_parmchk('ANTECHAMBER_AC.AC')
    gff = my_ant.parse_output()

    ac = AC()
    ac.read_atomIndex('ANTECHAMBER_AC.AC')
    ac.read_atomType('ANTECHAMBER_AC.AC')
    #print "num types ",ac.num_types
    #print "atom_name:gaff_atom_type",ac.atom_gaff

    tp = TopMol.from_file('mol.rtf')
    #print "Top BONDS", tp.bonds
    #print "Top ANGLES",tp.angles
    #print "DIHEDRALS",tp.dihedrals
    #print "IMPH",tp.imdihedrals


    my_gff = GFF()
    my_gff.read_forcefield_para('mol.prm')
    my_gff.read_forcefield_para('mol.frcmod')
    my_gff.read_mass('mol.prm')

    #print "gaff_bonds",my_gff.bonds
    #print "gaff_angles",my_gff.angles
    #print "gaff_dihedrals",my_gff.dihedrals
    #print "gaff_imp dihedrals",my_gff.imdihedrals
    #d1 = my_gff1.to_dict
    #print d1


    atom_gaff = AC()
    atom_gaff.read_atomType('ANTECHAMBER_AC.AC')
    #print "Atom Gaff",atom_gaff.atom_gaff


    my_gff_lib = GFF_library()
    my_gff_lib.append_gff()

    my_ant.get_FF_bonds(my_gff.bonds, tp.bonds, atom_gaff.atom_gaff)
    my_ant.get_FF_angles(my_gff.angles, tp.angles, atom_gaff.atom_gaff)
    my_ant.get_FF_dihedrals(my_gff.dihedrals, tp.dihedrals, atom_gaff.atom_gaff)
    my_ant.get_FF_imdihedrals(my_gff.imdihedrals, tp.imdihedrals, atom_gaff.atom_gaff)
    #print "bond_label:bond_type,bond_parameter",my_ant.topbondFF,
    print "angle_label:angle_type,angle_parameter",my_ant.topangleFF
    #print my_ant.num_bond_types
    #print "number of angles",my_ant.num_ang_types
    #print "dihedral_label:dihedral_type,dihedral_parameter",my_ant.topdihedralFF
    #print "number of dihedrals",my_ant.num_dih_types
    #print "dihedral_label:dihedral_type,dihedral_parameter",my_ant.topimdihedralFF
    #print "number of dihedrals",my_ant.num_imdih_types


    my_ant.clean_files()
    gff_list.append(gff)

    my_lampps=LMPInput()
    my_lampps.set_bond_types(my_gff.bonds)
    my_lampps.set_angle_types(my_gff.angles)
    my_lampps.set_dihedral_types(my_gff.dihedrals)
    my_lampps.set_improper_types(my_gff.imdihedrals)
    my_lampps.set_bond(tp.bonds)
    print "Lampps input file",atom_gaff.num_types,my_lampps.bonds,my_lampps.angles,my_lampps.dihedrals,my_lampps.imdihedrals
    print my_lampps.bonds
    print 'masses',my_gff.masses
    print my_lampps.set_masses(atom_gaff.atom_gaff,my_gff.masses)
    print my_lampps.set_pair_coeff(atom_gaff.atom_gaff,my_gff.vdws)
















