import os
from unittest import TestCase
from pymatgen.io.qchem import QcInput
from rubicon.scripts.assign_basis_set_by_range import assign_basis_set_by_range

__author__ = 'xiaohuiqu'


test_dir = os.path.abspath(os.path.join(__file__, "..", "..", "..", "..", "test_files", "range_basis_set_assigner"))

class TestAssign_basis_set_by_range(TestCase):
    def test_assign_basis_set_by_range(self):
        qcinp_file_name = os.path.join(test_dir, "MgTFSI_31_acetonitrile.qcinp")
        basis_def_file_name = os.path.join(test_dir, "MgTFSI_31_AN_basis.txt")
        qcinp_no_basis = QcInput.from_file(qcinp_file_name)
        qcinp_with_basis = assign_basis_set_by_range(qcinp=qcinp_no_basis,
                                                     basis_def_file=basis_def_file_name)
        self.assertEqual(qcinp_with_basis.jobs[0].params["rem"]["basis"], "mixed")
        ans = [('Mg', '3-21g*'), ('N', '3-21+g*'), ('S', '3-21+g*'), ('O', '3-21+g*'), ('O', '3-21+g*'),
               ('C', '3-21+g*'), ('F', '3-21+g*'), ('F', '3-21+g*'), ('F', '3-21+g*'), ('S', '3-21+g*'),
               ('O', '3-21+g*'), ('O', '3-21+g*'), ('C', '3-21+g*'), ('F', '3-21+g*'), ('F', '3-21+g*'),
               ('F', '3-21+g*'), ('C', '3-21g*'), ('C', '3-21g*'), ('N', '3-21+g*'), ('H', '3-21g*'),
               ('H', '3-21g*'), ('H', '3-21g*'), ('C', '3-21g*'), ('C', '3-21g*'), ('N', '3-21+g*'),
               ('H', '3-21g*'), ('H', '3-21g*'), ('H', '3-21g*'), ('C', '3-21g*'), ('C', '3-21g*'),
               ('N', '3-21+g*'), ('H', '3-21g*'), ('H', '3-21g*'), ('H', '3-21g*'), ('C', '3-21g*'),
               ('C', '3-21g*'), ('N', '3-21+g*'), ('H', '3-21g*'), ('H', '3-21g*'), ('H', '3-21g*'),
               ('C', '3-21g*'), ('C', '3-21g*'), ('N', '3-21+g*'), ('H', '3-21g*'), ('H', '3-21g*'),
               ('H', '3-21g*'), ('C', '3-21*'), ('C', '3-21*'), ('N', '3-21*'), ('H', '3-21*'), ('H', '3-21*'),
               ('H', '3-21*'), ('C', '3-21*'), ('C', '3-21*'), ('N', '3-21*'), ('H', '3-21*'), ('H', '3-21*'),
               ('H', '3-21*'), ('C', '3-21*'), ('C', '3-21*'), ('N', '3-21*'), ('H', '3-21*'), ('H', '3-21*'),
               ('H', '3-21*'), ('C', '3-21*'), ('C', '3-21*'), ('N', '3-21*'), ('H', '3-21*'), ('H', '3-21*'),
               ('H', '3-21*'), ('C', '3-21*'), ('C', '3-21*'), ('N', '3-21*'), ('H', '3-21*'), ('H', '3-21*'),
               ('H', '3-21*'), ('C', '3-21*'), ('C', '3-21*'), ('N', '3-21*'), ('H', '3-21*'), ('H', '3-21*'),
               ('H', '3-21*'), ('C', '3-21*'), ('C', '3-21*'), ('N', '3-21*'), ('H', '3-21*'), ('H', '3-21*'),
               ('H', '3-21*'), ('C', '3-21*'), ('C', '3-21*'), ('N', '3-21*'), ('H', '3-21*'), ('H', '3-21*'),
               ('H', '3-21*'), ('C', '3-21*'), ('C', '3-21*'), ('N', '3-21*'), ('H', '3-21*'), ('H', '3-21*'),
               ('H', '3-21*'), ('C', '3-21*'), ('C', '3-21*'), ('N', '3-21*'), ('H', '3-21*'), ('H', '3-21*'),
               ('H', '3-21*'), ('C', '3-21*'), ('C', '3-21*'), ('N', '3-21*'), ('H', '3-21*'), ('H', '3-21*'),
               ('H', '3-21*'), ('C', '3-21*'), ('C', '3-21*'), ('N', '3-21*'), ('H', '3-21*'), ('H', '3-21*'),
               ('H', '3-21*'), ('C', '3-21*'), ('C', '3-21*'), ('N', '3-21*'), ('H', '3-21*'), ('H', '3-21*'),
               ('H', '3-21*'), ('C', '3-21*'), ('C', '3-21*'), ('N', '3-21*'), ('H', '3-21*'), ('H', '3-21*'),
               ('H', '3-21*'), ('C', '3-21*'), ('C', '3-21*'), ('N', '3-21*'), ('H', '3-21*'), ('H', '3-21*'),
               ('H', '3-21*'), ('C', '3-21*'), ('C', '3-21*'), ('N', '3-21*'), ('H', '3-21*'), ('H', '3-21*'),
               ('H', '3-21*'), ('C', '3-21*'), ('C', '3-21*'), ('N', '3-21*'), ('H', '3-21*'), ('H', '3-21*'),
               ('H', '3-21*'), ('C', '3-21*'), ('C', '3-21*'), ('N', '3-21*'), ('H', '3-21*'), ('H', '3-21*'),
               ('H', '3-21*'), ('C', '3-21*'), ('C', '3-21*'), ('N', '3-21*'), ('H', '3-21*'), ('H', '3-21*'),
               ('H', '3-21*'), ('C', '3-21*'), ('C', '3-21*'), ('N', '3-21*'), ('H', '3-21*'), ('H', '3-21*'),
               ('H', '3-21*'), ('C', '3-21*'), ('C', '3-21*'), ('N', '3-21*'), ('H', '3-21*'), ('H', '3-21*'),
               ('H', '3-21*'), ('C', '3-21*'), ('C', '3-21*'), ('N', '3-21*'), ('H', '3-21*'), ('H', '3-21*'),
               ('H', '3-21*'), ('C', '3-21*'), ('C', '3-21*'), ('N', '3-21*'), ('H', '3-21*'), ('H', '3-21*'),
               ('H', '3-21*'), ('C', '3-21*'), ('C', '3-21*'), ('N', '3-21*'), ('H', '3-21*'), ('H', '3-21*'),
               ('H', '3-21*'), ('C', '3-21*'), ('C', '3-21*'), ('N', '3-21*'), ('H', '3-21*'), ('H', '3-21*'),
               ('H', '3-21*'), ('C', '3-21*'), ('C', '3-21*'), ('N', '3-21*'), ('H', '3-21*'), ('H', '3-21*'),
               ('H', '3-21*')]
        self.assertEqual(qcinp_with_basis.jobs[0].params["basis"], ans)