import glob
from pymatgen.packmol.packmol import PackmolRunner

from topology import AC, TopMol
from lamppsio import LMPInput

__author__ = 'navnidhirajput'

from Antechamber_wrapper import Antechamber
from pymatgen.core.structure import Molecule
from gff import GFF


coords = [[0.000000, 0.000000, 0.000000],
          [0.000000, 0.000000, 1.089000],
          [1.026719, 0.000000, -0.363000],
          [-0.513360, -0.889165, -0.363000],
          [-0.513360, 0.889165, -0.363000]]

coords1 = [[2.439852592, -0.695560517, -0.059660824],
           [1.215789897, -1.364471113, -0.035273969],
           [0.006178611, -0.680052792, -0.033906341],
           [0.011432936, 0.736021177, -0.04523679],
           [1.244501499, 1.412040006, -0.073274723],
           [2.446426478, 0.695310046, -0.032857094],
           [1.197599275, -2.451378243, -0.021485707],
           [3.387001913, 1.235096154, 0.026641733],
           [-2.291988347, 0.715581207, -0.026151],
           [-2.289998326, -0.662369562, -0.008671972],
           [-3.215496455, 1.282918736, -0.023663871],
           [-3.211335899, -1.233000313, 0.009662803],
           [-1.151603286, 1.437111014, -0.04771053],
           [-1.147520606, -1.381134987, -0.0136565071],
           [3.633832306, -1.424386617, 0.039840294],
           [3.721097543, -1.873962237, 0.949467681],
           [4.463123007, -0.872224014, -0.160434368],
           [1.285632406, 2.82422801, 0.069252241],
           [0.37592053, 3.218997493, -0.180146967],
           [2.059832605, 3.263215412, -0.415601215]]

coords2 = [[2.077,   2.130,   2.542],
           [1.426,   1.495,   3.152],
           [1.978,   1.858,   1.482],
           [1.661,   3.499,   2.704],
           [2.759,   4.301,   2.804],
           [2.732,   5.496,   2.818],
           [3.891,   3.546,   2.886],
           [3.535,   2.156,   3.014],
           [3.647,   1.864,   4.067],
           [4.213,   1.566,   2.389]]

coords3=[[0.723,  -0.058,  -0.021],
           [-0.075,  -0.188,   1.070],
           [0.133,   0.343,  -1.175],
           [1.904,  -0.273,   0.028],
           [-1.355,  -0.871,   0.967],
           [-1.018,   1.209,  -1.154],
           [-1.459,  -1.850,   2.121],
           [-1.416,  -1.386,  -0.000],
           [-2.153,  -0.118,   1.01814],
           [-0.884,   1.902,  -1.991],
           [-1.074,   1.771,  -0.214],
           [-1.938,   0.631,  -1.304],
           [-0.670,  -2.610,   2.061],
           [-2.436,  -2.352,   2.089],
           [-1.368,  -1.327,   3.082]]

etc = Molecule(["C", "H", "H", "O", "C", "O", "O","C","H", "H"], coords2)

emc = Molecule(["C", "O", "O", "O", "C", "C","C","H", "H","H", "H","H", "H","H", "H"], coords3)

mol1 = Molecule(["C", "H", "H", "H", "H"], coords)

mol2 = Molecule(
    ["C", "C", "C", "C", "C", "C", "H", "H", "C", "C", "H", "H", "N", "N", "N",
     "H", "H", "N", "H", "H"], coords1)
#['C'] * 5  + ["H"] * 10



mols = [emc]

"""

making pdb file for molecules,running antechamber
parsing the output to gff class to read force field parameters
and cleaning all the files generated by antechamber.
"""

gff_list = []
for mol in mols:
    my_ant = Antechamber(mol)
    my_ant.convert_to_pdb(mol, 'mol.pdb')
    my_ant.run_antechamber('mol.pdb')
    my_ant.run_parmchk('ANTECHAMBER_AC.AC')
    gff = my_ant.parse_output()

    ac = AC()
    ac.read_atomIndex('ANTECHAMBER_AC.AC')
    ac.read_atomType('ANTECHAMBER_AC.AC')
    #print "num types ",ac.num_types
    #print "atom_name:gaff_atom_type",ac.atom_gaff

    pmr = PackmolRunner([emc, emc], [{"number":1,"inside box":[0.,0.,0.,40.,40.,40.]}, {"number":2}])
    mol_pack= pmr.run()
    #print "MOLS", pmr.param_list
    #print pmr.param_list[0]

    top = TopMol.from_file('mol.rtf')
    #exception
    #print len(top.atoms)*(pmr.param_list[0]['number']+pmr.param_list[1]['number'])

    #print pmr.param_list[0]['number']


    my_gff = GFF()

    my_gff.read_forcefield_para('mol.frcmod')
    #print len(my_gff.dihedrals)
    #print my_gff.angles

    #print my_gff.masses
    #print "gaff_bonds",my_gff.bonds
    #print "gaff_angles",my_gff.angles
    #print "gaff_dihedrals",my_gff.dihedrals
    #print "gaff_imp dihedrals",my_gff.imdihedrals
    #d1 = my_gff1.to_dict
    #print d1



    atom_gaff = AC()
    atom_gaff.read_atomType('ANTECHAMBER_AC.AC')
    #print "Atom Gaff",atom_gaff.atom_gaff


#    my_ant.get_FF(my_gff, top, atom_gaff.atom_gaff)
    my_ant.get_FF_bonds(my_gff.bonds, top.bonds, atom_gaff.atom_gaff)
    my_ant.get_FF_angles(my_gff.angles, top.angles, atom_gaff.atom_gaff)
    my_ant.get_FF_dihedrals(my_gff.dihedrals, top.dihedrals, atom_gaff.atom_gaff)
    my_ant.get_FF_imdihedrals(my_gff.imdihedrals, top.imdihedrals, atom_gaff.atom_gaff)
    print my_ant.topdihedralFF
    #print "bond_label:bond_type,bond_parameter",my_ant.topbondFF,
    #print "angle_label:angle_type,angle_parameter",my_ant.topangleFF
    #print my_ant.num_bond_types
    #print "number of angles",my_ant.num_ang_types
    #print "dihedral_label:dihedral_type,dihedral_parameter",my_ant.topdihedralFF
    #print "number of dihedrals",my_ant.num_dih_types
    #print "dihedral_label:dihedral_type,dihedral_parameter",my_ant.topimdihedralFF
    #print "number of dihedrals",my_ant.num_imdih_types


    #my_ant.clean_files()
    gff_list.append(gff)




    #print mol_pack
    #print "autobox---- size",pmr.param_list[0]['number']
    #print "MOLS",len(pmr.mols[0])
    #num_mol=pmr.param_list[0]['number']+pmr.param_list[1]['number']
    #print num_mol


    my_lampps=LMPInput()

    #my_lampps.set_bond(tp.bonds)
    #print "Lampps input file",atom_gaff.num_types,my_lampps.bonds,my_lampps.angles,my_lampps.dihedrals,my_lampps.imdihedrals
    #print my_lampps.bonds

    print my_lampps.set_coeff(my_gff,top,pmr,my_ant)
    print my_lampps.set_atom('box.pdb',pmr,my_gff,ac)
    print my_lampps.set_bonds(pmr,my_gff,ac,top)
    print my_lampps.set_angles(pmr,my_gff,ac,top)
    print my_lampps.set_dihedrals(pmr,my_gff,ac,top,my_ant)
    print my_lampps.set_imdihedrals(pmr,my_gff,ac,top)

















