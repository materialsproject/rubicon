# coding: utf-8

from __future__ import division, print_function, unicode_literals, \
    absolute_import

"""
This module implements classes for processing Lammps input files.
"""

import six
from six.moves import range
from six.moves import zip
from io import open
import math

from pymatgen.core.structure import Molecule, Structure

from rubicon.io.amber.antechamber import AntechamberRunner


__author__ = 'Navnidhi Rajput, Kiran Mathew'


class LammpsData(object):
    """
    Write the lammps data file for the given molecule and box size.
    The default data file format corresponds to atom_style = atomic. If the
    molecule has the "charge" site property then the data file will be written
    in the format that corresponds to atom_style = charge

    Args:
        molecule (Molecule): molecule
        box_size (list): size of the box that embeds the packed molecule.
            [x_min, y_min, z_min, x_max, y_max, z_max]    """
    def __init__(self, molecule, box_size):
        self.box_size = box_size
        box_lengths = [box_size[dim + 3] - box_size[dim] for dim in range(3)]
        self.boxed_molecule = None
        if isinstance(molecule, Molecule):
            self.boxed_molecule = molecule.get_boxed_structure(*box_lengths)
        elif isinstance(molecule, Structure):
            max_length = max(self.boxed_molecule.lattice.abc)
            max_box_size = max(box_lengths)
            self.boxed_molecule = Molecule.from_sites(self.boxed_molecule.sites)
            if max_length < max_box_size:
                self.boxed_molecule = \
                    self.boxed_molecule.get_boxed_structure(*box_lengths)
            else:
                self.boxed_molecule = \
                    self.boxed_molecule.get_boxed_structure(max_length,
                                                            max_length, max_length)
        else:
            raise ValueError("molecule must be an object of Molecule or "
                             "Structure ")

    def _set_basic_data(self):
        self.natoms = len(self.boxed_molecule)
        self.natom_types = len(self.boxed_molecule.symbol_set)
        self.box_size = [0, self.boxed_molecule.lattice.a, 0,
                         self.boxed_molecule.lattice.b, 0,
                         self.boxed_molecule.lattice.c]
        self.atomic_masses = [site.specie.data["Atomic mass"] for site in
                              self.boxed_molecule]
        self.atoms_data = []
        for i, site in enumerate(self.boxed_molecule):
            atom_type = self.boxed_molecule.symbol_set.index(
                site.species_string)
            if hasattr(site, "charge"):
                self.atoms_data.append([i + 1, atom_type + 1, site.charge,
                                        site.x, site.y, site.z])
            else:
                self.atoms_data.append([i + 1, atom_type + 1, site.x,
                                        site.y, site.z])

    def __str__(self):
        """
        string representation of LammpsData
        """
        lines = []
        lines.append("Data file generated by rubicon\n")
        lines.append("{} atoms\n".format(self.natoms))
        lines.append("{} atom types\n".format(self.natom_types))
        lines.append("{} {} xlo xhi\n{} {} ylo yhi\n{} {} zlo zhi".format(
            *self.box_size))
        lines.append("\nMasses \n")
        for i, m in enumerate(self.atomic_masses):
            lines.append("{} {}".format(i + 1, m))
        lines.append("\nAtoms \n")
        _, __, ___ = [lines.append(" ".join([str(x) for x in ad])) for ad in
                      self.atoms_data]
        return '\n'.join(lines)

    def write_data_file(self, filename=None):
        """
        write lammps data input file
        """
        with open(filename, 'w') as f:
            f.write(self.__str__())


class LammpsAmberDataNew(LammpsData):
    """
    Sets Lammps data input file using antechamber(amber) generated force field
    parameters

    Args:
        mols (list): list of Molecule objects
        mols_number (list): list of number of each type of molecule in mols
            list
        box_size (list): size of the box that embeds the packed molecule.
            [x_min, y_min, z_min, x_max, y_max, z_max]
        packed_molecule (Molecule): the packed molecules generated by the
            Packmol using the molecules in mols list
        gaussian_file (str): the name of gaussian output file that will be
            used by Antechamber to generate the force field parameters
    """
    def __init__(self, mols, mols_number, box_size, packed_molecule,
                 gaussian_file):
        self.mols = mols
        self.mols_number = mols_number
        self.box_size = box_size
        self.packed_molecule = packed_molecule
        self.gaussian_file = gaussian_file
        self.num_improper_dihedrals = None
        super(LammpsAmberData, self).__init__(self.packed_molecule,
                                              self.box_size)
        self._get_force_field()
        self._set_data()
        self._set_coeffs()

    def _get_force_field(self):
        """
        Use the gaussian output file and the Antechamber tool to generate the
        force field and the topology data for the lammps calculation.
        """
        acr = AntechamberRunner(self.mols)
        self.amber_ffs = acr.get_gaussian_ff_top(self.gaussian_file)

    def _set_data(self):
        self._set_basic_data()
        self.nbond_types = 0
        self.nangle_types = 0
        self.nimproper_dih = 0
        self.ndih = 0
        self.nbonds = 0
        self.nangles = 0
        self.nimdihs = 0
        for i, amber_ff in enumerate(self.amber_ffs):
            gff = amber_ff.force_field
            top = amber_ff.topology
            self.nbond_types += len(gff.bonds)
            self.nangle_types += len(gff.angles)
            self.nimproper_dih += len(gff.imdihedrals)
            self.ndih += sum([len(gd) for _, gd in six.iteritems(
                gff.dihedrals)])
            self.nbonds += len(top.bonds) * self.mols_number[i]
            self.nangles += len(top.angles) * self.mols_number[i]
            self.nimdihs += len(top.imdihedrals) * self.mols_number[i]

    def _set_coeffs(self):
        self.bond_coeffs = []
        self.pair_coeffs = []
        self.angle_coeffs = []
        self.dihedral_coeffs = []
        self.improper_coeffs = []
        bond_id_offset = 0
        angle_id_offset = 0
        vdw_id_offset = 0
        dih_id_offset = 0
        imdih_id_offset = 0
        for mol_id, amber_ff in enumerate(self.amber_ffs):
            gff = amber_ff.force_field
            top = amber_ff.topology
            # mol_id --> [atom_id, atom_type, atom_name]
            # mol_id --> [[bond_id, bond_type],..]
            self.bond_coeffs, self.bond_map[mol_id] = \
                self._get_param_coeff(gff, "bonds", bond_id_offset)
            self.angle_coeffs, self.angle_map[mol_id] = \
                self._get_param_coeff(gff, "angles", angle_id_offset)
            self.vdw_coeffs, self.vdw_map[mol_id] = \
                self._get_param_coeff(gff, "vdws", vdw_id_offset)
            self.dihedral_coeffs, self.dihedral_map[mol_id] = \
                self._get_param_coeff(gff, "dihedrals", dih_id_offset)
            self.improper_coeffs, self.imdihedral_map[mol_id] = \
                self._get_param_coeff(gff, "imdihedrals", imdih_id_offset)
        # set the atom, bond, etc data

    def _get_param_coeff(self, obj, param, offset):
        if hasattr(obj, param):
            mapping = []
            p = getattr(obj, param)
            param_coeffs = []
            param_id_offset = offset
            if p:
                for i, param_vals in enumerate(p.values()):
                    param_id = param_id_offset + i + 1
                    param_coeffs.append([param_id] + list(param_vals))
                    mapping.append([param_id, p.keys()[i]])
                offset += len(p)
            return param_coeffs, mapping
        else:
            raise AttributeError

    def __str__(self):
        """
        returns a string of lammps data input file
        """
        lines = []
        for i, amber_ff in enumerate(self.amber_ffs):
            lines.append(self._set_gff_types(amber_ff))
            lines.append(self._set_top_types(amber_ff))
            lines.append(self._set_box_dimensions())
            lines.append(self._set_masses(amber_ff))
            lines.append(self._set_pair_coeffs(amber_ff))
            lines.append(self._set_bond_coeffs(amber_ff))
            lines.append(self._set_angle_coeffs(amber_ff))
            lines.append(self._set_dihedral_coeffs(amber_ff))
            lines.append(self._set_improper_coeffs(amber_ff))
            lines.append(self._set_atom(amber_ff))
            lines.append(self._set_bonds(amber_ff))
            lines.append(self._set_angles(amber_ff))
            lines.append(self._set_dihedrals(amber_ff))
            lines.append(self._set_imdihedrals(amber_ff))
        return '\n'.join(lines)

class LammpsAmberData(LammpsData):
    """
    Sets Lammps data input file using antechamber(amber) generated force field
    parameters
    Args:
        mols (list): list of Molecule objects
        mols_number (list): list of number of each type of molecule in mols
            list
        box_size (list): size of the box that embeds the packed molecule.
            [x_min, y_min, z_min, x_max, y_max, z_max]
        packed_molecule (Molecule): the packed molecules generated by the
            Packmol using the molecules in mols list
        gaussian_file (str): the name of gaussian output file that will be
            used by Antechamber to generate the force field parameters
    """
    def __init__(self, mols, mols_number, box_size, packed_molecule,
                 gaussian_file):
        self.mols = mols
        self.mols_number = mols_number
        self.box_size = box_size
        self.packed_molecule = packed_molecule
        self.gaussian_file = gaussian_file
        self.lines = []
        self.num_improper_dihedrals = None
        self._generate_data()
        box_lengths = [box_size[dim + 3] - box_size[dim] for dim in range(3)]
        super(LammpsAmberData, self).__init__(self.packed_molecule,
                                              box_lengths)

    def _generate_data(self):
        """
        Use the gaussian output file and the Antechamber tool to generate the
        force field and the topology data for the lammps calculation.
        """
        acr = AntechamberRunner(self.mols)
        self.ffmol_list = acr.get_ff_top_mol(self.mols, self.gaussian_file)

    def _set_gff_types(self, ffmol_list):
        """
        set force field information about number of atom types, bond types etc.
        """
        lines = []
        num_dih = 0
        num_atoms_types = 0
        num_bonds_types = 0
        num_angles_types = 0
        num_dihedrals_types = 0
        num_impropers_types = 0
        atom_type_list = []
        bond_type_list = []
        angle_type_list = []
        dihedral_type_list = []
        improper_type_list = []
        lines.append('LAMMPS data File\n')
        for mol, num_mols in zip(self.mols, self.mols_number):
            lines.append("{} {} {} {}".format('#', num_mols,
                                              mol.site_properties["mol_name"][
                                                  0],
                                              "molecules"))

        for ffmol in ffmol_list:
            gff = ffmol.gff
            atom_type_list.extend(list(gff.masses.keys()))
            bond_type_list.extend(list(gff.bonds.keys()))
            angle_type_list.extend(list(gff.angles.keys()))
            dihedral_type_list.extend(list(gff.dihedrals.keys()))
            improper_type_list.extend(list(gff.imdihedrals.keys()))
            num_atoms_types = len(set(atom_type_list))
            num_bonds_types += len(gff.bonds)
            num_angles_types += len(gff.angles)
            num_impropers_types += (len(gff.imdihedrals))
            for k, v in six.iteritems(gff.dihedrals):
                num_dih += len(v)
        num_dihedrals_types += num_dih
        lines.append('\n')
        lines.append("{} {}".format(num_atoms_types, "atom types"))
        lines.append("{} {}".format(num_bonds_types, "bond types"))
        lines.append("{} {}".format(num_angles_types, "angle types"))
        lines.append("{} {}".format(num_dihedrals_types, "dihedral types"))
        lines.append(
            "{} {}{}".format(num_impropers_types, "improper types", '\n'))
        self.num_improper_dihedrals = num_impropers_types
        self.lines.extend(lines)
        return '\n'.join(lines)

    def _set_top_types(self, ffmol_list):
        """
        set force field information about number of atom types, bond types etc.
        """
        lines = []
        num_atoms = 0
        num_bonds = 0
        num_angles = 0
        num_dihedrals = 0
        num_impropers = 0
        num_total_dih = 0
        for ffmol, num_mols in zip(ffmol_list, self.mols_number):
            gff = ffmol.gff
        top = ffmol.top
        top._get_ff_dihedrals(gff.dihedrals, top.dihedrals, gff.atom_gaff)
        num_atoms += (len(top.atoms)) * num_mols
        num_bonds += len(top.bonds * num_mols)
        num_angles += (len(top.angles) * num_mols)
        num_impropers += (len(top.imdihedrals) * num_mols)

        for k, n in six.iteritems(top.topdihedralff):
            num_total_dih += len(n[1])
        num_dihedrals += (num_total_dih * num_mols)
        lines.append("{} {}".format(num_atoms, "atoms"))
        lines.append("{} {}".format(num_bonds, "bonds"))
        lines.append("{} {}".format(num_angles, "angles"))
        lines.append("{} {}".format(num_dihedrals, "dihedrals"))
        lines.append(
            "{} {}{}".format(num_impropers, "impropers",
                             '\n'))
        self.lines.extend(lines)
        return '\n'.join(lines)

    def _set_box_dimensions(self):
        """
        set force field information about number of atom types, bond types etc.
        """
        lines = []
        lines.append(
            "{} {} {}".format(self.box_size[0],
                              self.box_size[3],
                              "xlo xhi"))
        lines.append(
            "{} {} {}".format(self.box_size[1],
                              self.box_size[4],
                              "ylo yhi"))
        lines.append(
            "{} {} {}{}".format(self.box_size[2],
                                self.box_size[5],
                                "zlo zhi", '\n'))

        self.lines.extend(lines)
        return '\n'.join(lines)

    def _set_masses(self, ffmol_list):
        lines = []
        num_atoms = 0
        mol_index = 1
        element_list = []
        lines.append('Masses\n')
        for ffmol, mol, num_mols in zip(ffmol_list, self.mols,
                                        self.mols_number):
            gff = ffmol.gff
            if gff.masses is not None:
                for i, v in enumerate(gff.masses.values()):
                    if list(gff.masses.keys())[i] in element_list:
                        continue
                    element_list.append(list(gff.masses.keys())[i])
                    lines.append(
                        '{} {} {} {} {} {}'.format(num_atoms + 1, v, '#',
                                                   list(gff.masses.keys())[i],
                                                   mol_index,
                                                   mol.site_properties[
                                                       "mol_name"][0]))
                    num_atoms = num_atoms + 1
            mol_index += 1
        lines.append('\n')
        self.lines.extend(lines)
        return '\n'.join(lines)

    def _set_pair_coeffs(self, ffmol_list):
        lines = []
        num_atoms = 0
        mol_index = 1
        element_list = []
        lines.append('Pair Coeffs\n')
        for ffmol, mol in zip(ffmol_list, self.mols):
            gff = ffmol.gff
            top = ffmol.top
            if gff.vdws:
                for i, v in enumerate(gff.vdws.values()):
                    if list(gff.vdws.keys())[i] in element_list:
                        continue
                    element_list.append(list(gff.vdws.keys())[i])
                    lines.append(
                        '{} {} {} {} {} {} {}'.format(num_atoms + 1, v[1],
                                                      v[0] * 1.7818, '#',
                                                      list(gff.vdws.keys())[i],
                                                      mol_index,
                                                      mol.site_properties[
                                                          "mol_name"][0]))
                    num_atoms = num_atoms + 1
            mol_index += 1
        if len(lines) == 1:
            return ''
        lines.append('\n')
        self.lines.extend(lines)
        return '\n'.join(lines)

    def _set_bond_coeffs(self, ffmol_list):

        lines = []
        num_atoms = 0
        element_list = []
        mol_index = 1
        lines.append('Bond Coeffs\n')
        for ffmol, mol in zip(ffmol_list, self.mols):
            gff = ffmol.gff
            if gff.bonds:
                for i, v in enumerate(gff.bonds.values()):
                    lines.append(
                        '{} {}  {} {} {} {} {} {}'.format(num_atoms + 1, v[0],
                                                          v[1], '#',
                                                          list(
                                                              gff.bonds.keys())[
                                                              i][
                                                              0],
                                                          list(
                                                              gff.bonds.keys())[
                                                              i][
                                                              1],
                                                          mol_index,
                                                          mol.site_properties[
                                                              "mol_name"][0]))
                    num_atoms = num_atoms + 1
            mol_index += 1
        if len(lines) == 1:
            return ''
        lines.append('\n')
        self.lines.extend(lines)
        return '\n'.join(lines)

    def _set_angle_coeffs(self, ffmol_list):
        lines = []
        num_atoms = 0
        element_list = []
        mol_index = 1
        lines.append('Angle Coeffs\n')
        for ffmol, mol in zip(ffmol_list, self.mols):
            gff = ffmol.gff
            top = ffmol.top
            if gff.angles:
                for i, v in enumerate(gff.angles.values()):
                    lines.append(
                        '{} {} {} {} {} {} {} {} {}'.format(num_atoms + 1,
                                                            v[0],
                                                            v[1], '#',
                                                            list(
                                                                gff.angles.keys())[
                                                                i][
                                                                0],
                                                            list(
                                                                gff.angles.keys())[
                                                                i][
                                                                1],
                                                            list(
                                                                gff.angles.keys())[
                                                                i][
                                                                2], mol_index,
                                                            mol.site_properties[
                                                                "mol_name"][
                                                                0]))
                    num_atoms = num_atoms + 1
            mol_index += 1
        if len(lines) == 1:
            return ''
        lines.append('\n')
        self.lines.extend(lines)
        return '\n'.join(lines)

    def _set_dihedral_coeffs(self, ffmol_list):
        lines = []
        num_atoms = 0
        j = 0
        element_list = []
        mol_index = 1
        lines.append('Dihedral Coeffs\n')
        for ffmol, mol in zip(ffmol_list, self.mols):
            gff = ffmol.gff
            top = ffmol.top
            if gff.dihedrals is not None:
                for i, v in enumerate(gff.dihedrals.values()):
                    for func_form, d in six.iteritems(v):
                        j += 1
                        lines.append(
                            '{}  {}  {}  {} {} {} {} {} {} {} {} {}'.format(j,
                                                                            d[
                                                                                0],
                                                                            func_form,
                                                                            int(
                                                                                d[
                                                                                    1]),
                                                                            '0.0',
                                                                            '#',
                                                                            list(
                                                                                gff.dihedrals.keys())[
                                                                                i][
                                                                                0],
                                                                            list(
                                                                                gff.dihedrals.keys())[
                                                                                i][
                                                                                1],
                                                                            list(
                                                                                gff.dihedrals.keys())[
                                                                                i]
                                                                            [
                                                                                2],
                                                                            list(
                                                                                gff.dihedrals.keys())[
                                                                                i][
                                                                                3],
                                                                            mol_index,
                                                                            mol.site_properties[
                                                                                "mol_name"][
                                                                                0]))
            mol_index += 1
        if len(lines) == 1:
            return ''
        lines.append('\n')
        self.lines.extend(lines)
        return '\n'.join(lines)

    def _set_improper_coeffs(self, ffmol_list):
        lines = []
        num_atoms = 0
        element_list = []
        mol_index = 1
        lines.append('Improper Coeffs\n')
        for ffmol, mol in zip(ffmol_list, self.mols):
            gff = ffmol.gff
            top = ffmol.top
            if gff.imdihedrals:
                for i, v in enumerate(gff.imdihedrals.values()):
                    lines.append('{} {}  {}  {} {} {} {} {} {} {} {}'.format
                                 (num_atoms + 1, v[0],
                                  int(round(math.cos(math.degrees(v[1])), 0)),
                                  int(v[2]), '#',
                                  list(gff.imdihedrals.keys())[i][0],
                                  list(gff.imdihedrals.keys())[i][1],
                                  list(gff.imdihedrals.keys())[i][2],
                                  list(gff.imdihedrals.keys())[i][3],
                                  mol_index,
                                  mol.site_properties["mol_name"][0]))
                    num_atoms = num_atoms + 1
            mol_index += 1
        if len(lines) == 1:
            return ''
        lines.append('\n')
        self.lines.extend(lines)
        return '\n'.join(lines)

    def _set_atom(self, ffmol_list):
        """
        set the Atoms section in lammps data file
        """
        lines = []
        element_list = []
        num_atoms = 0
        masses_index = 0
        atom_type_index = {}
        lines.append('Atoms\n')
        self.box_mol_index = []
        i = 0
        mol_index = 0
        for ffmol, mol, num_mols in zip(ffmol_list, self.mols,
                                        self.mols_number):
            gff = ffmol.gff
            top = ffmol.top
            if gff.masses is not None:
                for m, v in enumerate(gff.masses.values()):
                    if list(gff.masses.keys())[m] in element_list:
                        continue
                    element_list.append(list(gff.masses.keys())[m])
                    masses_index = masses_index + 1
                    atom_type_index[list(gff.masses.keys())[m]] = masses_index
            num_atoms = len(mol)
            num_this_mol = num_mols

            # iterate every molecule of molecule type
            for imol in range(num_mols):
                mol_coords = self.packed_molecule.cart_coords[
                             i:i + num_atoms]
                mol_index += 1
                d = {}
                for k, v in enumerate(mol_coords):
                    lines.append(
                        '{}  {}  {}  {}  {}  {} {} {}  {} {} {} {}'.format(
                            k + i + 1,
                            mol_index,
                            atom_type_index[
                                gff.atom_index_gaff
                                [
                                    k + 1].lower()], str(top.charges[k][0])
                            ,
                            v[0], v[1],
                            v[2], '#',
                            mol_index,
                            gff.atom_index_gaff[
                                k + 1],
                            gff.atom_index[
                                k + 1],
                            mol.site_properties["mol_name"][0]))
                    d[gff.atom_index[k + 1]] = k + i + 1

                self.box_mol_index.append(d)
                i += num_atoms
        lines.append('\n')
        self.lines.extend(lines)
        return '\n'.join(lines)

    def _set_bonds(self, ffmol_list):
        """
        set the Bonds section in lammps data file
        """
        lines = []
        bond_index = 0
        bond_type_index = {}
        i = 0
        mol_index = 0
        lines.append('Bonds\n')
        for ffmol, mol, num_mols in zip(ffmol_list, self.mols,
                                        self.mols_number):
            gff = ffmol.gff
            top = ffmol.top
            if gff.bonds:
                for m, v in enumerate(gff.bonds.values()):
                    bond_index = bond_index + 1
                    bond_type_index[list(gff.bonds.keys())[m]] = bond_index

            for imol in range(num_mols):
                mol_bonds = top.bonds
                mol_index += 1
                for k, v in enumerate(mol_bonds):
                    a = gff.atom_gaff[top.bonds[k][0]]
                    b = gff.atom_gaff[top.bonds[k][1]]
                    bond_label = tuple(sorted([a, b]))
                    lines.append(
                        '{} {} {} {} {} {} {} {} {}'.format((i + k + 1),
                                                            bond_type_index[
                                                                bond_label],
                                                            self.box_mol_index[
                                                                mol_index - 1][
                                                                v[0]],
                                                            self.box_mol_index[
                                                                mol_index - 1][
                                                                v[1]],
                                                            '#',
                                                            mol_index,
                                                            top.bonds[k][
                                                                0],
                                                            top.bonds[k][
                                                                1],
                                                            mol.site_properties[
                                                                "mol_name"][
                                                                0]))
                i += len(top.bonds)
        if len(lines) == 1:
            return ''
        lines.append('\n')
        self.lines.extend(lines)
        return '\n'.join(lines)

    def _set_angles(self, ffmol_list):
        """
        set the Angles section in lammps data file
        """
        lines = []
        angle_type_index = {}
        angle_index = 0
        i = 0
        mol_index = 0
        lines.append('Angles\n')
        for ffmol, mol, num_mols in zip(ffmol_list, self.mols,
                                        self.mols_number):
            gff = ffmol.gff
            top = ffmol.top
            if gff.angles:
                for m, v in enumerate(gff.angles.values()):
                    angle_index = angle_index + 1
                    angle_type_index[list(gff.angles.keys())[m]] = angle_index
            # iterate over first molecule
            for imol in range(num_mols):
                mol_angles = top.angles
                mol_index += 1
                # iterate over bonds in first molecule
                for k, v in enumerate(top.angles):
                    a = gff.atom_gaff[top.angles[k][0]]
                    b = gff.atom_gaff[top.angles[k][1]]
                    c = gff.atom_gaff[top.angles[k][2]]
                    angle_label = (a, b, c)
                    if angle_label[0] > angle_label[2]:
                        angle_label = tuple(reversed(list(angle_label)))
                    lines.append('{}  {}  {}  {}  {}  {}  {}  {}  {}  {} {}'
                                 .format(i + k + 1,
                                         angle_type_index[angle_label],
                                         self.box_mol_index[mol_index - 1][
                                             v[0]],
                                         self.box_mol_index[mol_index - 1][
                                             v[1]],
                                         self.box_mol_index[mol_index - 1][
                                             v[2]], '#',
                                         mol_index,
                                         top.angles[k][0], top.angles[k][1],
                                         top.angles[k][2],
                                         mol.site_properties["mol_name"][0]))

                i += len(top.angles)
        if len(lines) == 1:
            return ''
        lines.append('\n')
        self.lines.extend(lines)
        return '\n'.join(lines)

    def _set_dihedrals(self, ffmol_list):
        """
        set the Dihedrals section in lammps data file
        """
        lines = []
        dihedral_index = 0
        dihedral_type_index = {}
        i = 0
        j = 0
        l = 0
        mol_index = 0
        lines.append('Dihedrals\n')
        for ffmol, mol, num_mols in zip(ffmol_list, self.mols,
                                        self.mols_number):
            gff = ffmol.gff
            top = ffmol.top
            if gff.dihedrals is not None:
                for m, v in enumerate(gff.dihedrals.values()):
                    dihedral_index = dihedral_index + 1
                    dihedral_type_index[
                        list(gff.dihedrals.keys())[m]] = dihedral_index

                top._get_ff_dihedrals(gff.dihedrals, top.dihedrals,
                                      gff.atom_gaff)
                for imol in range(num_mols):
                    mol_dihedrals = top.topdihedralff
                    mol_index += 1
                    l += 1
                    # iterate over bonds in first molecule
                    for k, v in six.iteritems(top.topdihedralff):
                        A = k.split()[0]
                        B = k.split()[1]
                        C = k.split()[2]
                        D = k.split()[3]
                        a = gff.atom_gaff[k.split()[0]]
                        b = gff.atom_gaff[k.split()[1]]
                        c = gff.atom_gaff[k.split()[2]]
                        d = gff.atom_gaff[k.split()[3]]
                        dihedral_label = (a, b, c, d)

                        if dihedral_label[0] > dihedral_label[3]:
                            dihedral_label = tuple(
                                reversed(list(dihedral_label)))
                        for func_form, d in six.iteritems(v[1]):
                            j += 1
                            lines.append(
                                '{}  {}  {}  {}  {}  {}  {}  {}  {}'
                                    .format(j, dihedral_type_index[
                                    dihedral_label],
                                            self.box_mol_index[mol_index - 1][
                                                A],
                                            self.box_mol_index[mol_index - 1][
                                                B],
                                            self.box_mol_index[mol_index - 1][
                                                C],
                                            self.box_mol_index[mol_index - 1][
                                                D],
                                            '#', mol_index,
                                            mol.site_properties["mol_name"][
                                                0]))
                    i += len(top.dihedrals)
        if len(lines) == 1:
            return ''
        lines.append('\n')
        self.lines.extend(lines)
        return '\n'.join(lines)

    def _set_imdihedrals(self, ffmol_list):
        """
        set the Improper Dihedral section in lammps data file
        """
        lines = []
        imdihedral_type_index = {}
        imdihedrals_index = 0
        i = 0
        j = 0
        mol_index = 0

        lines.append('Impropers\n')
        for ffmol, mol, num_mols in zip(ffmol_list, self.mols,
                                        self.mols_number):
            gff = ffmol.gff
            top = ffmol.top
            if gff.imdihedrals is not None:
                for m, v in enumerate(gff.imdihedrals.values()):
                    imdihedrals_index = imdihedrals_index + 1
                    imdihedral_type_index[
                        list(gff.imdihedrals.keys())[m]] = imdihedrals_index

                # iterate over types of mol
                # iterate over first molecule
                for imol in range(num_mols):
                    mol_impropers = top.imdihedrals
                    mol_index += 1
                    # iterate over improper dihedrals in first molecule
                    for k, v in enumerate(top.imdihedrals):
                        j += 1
                        a = gff.atom_gaff[top.imdihedrals[k][0]]
                        b = gff.atom_gaff[top.imdihedrals[k][1]]
                        c = gff.atom_gaff[top.imdihedrals[k][2]]
                        d = gff.atom_gaff[top.imdihedrals[k][3]]
                        imdihedral_label = tuple([a, b, c, d])
                        lines.append(
                            '{}  {}  {}  {}  {}  {}  {}  {}  {}  {}  {}  {} {}'
                                .format(j, imdihedral_type_index[
                                imdihedral_label],
                                        self.box_mol_index[mol_index - 1][
                                            v[0]],
                                        self.box_mol_index[mol_index - 1][
                                            v[1]],
                                        self.box_mol_index[mol_index - 1][
                                            v[2]],
                                        self.box_mol_index[mol_index - 1][
                                            v[3]],
                                        '#', mol_index,
                                        top.imdihedrals[k][0],
                                        top.imdihedrals[k][1],
                                        top.imdihedrals[k][2],
                                        top.imdihedrals[k][3],
                                        mol.site_properties["mol_name"][0]))
                    i += len(top.imdihedrals)
        if len(lines) == 1:
            return ''
        lines.append('\n')
        self.lines.extend(lines)
        return '\n'.join(lines)

    def __str__(self):
        """
        returns a string of lammps data input file
        """
        my_lammps_list = []
        my_lammps_list.append(
            self._set_gff_types(self.ffmol_list))
        my_lammps_list.append(
            self._set_top_types(self.ffmol_list))
        my_lammps_list.append(self._set_box_dimensions())
        my_lammps_list.append(
            self._set_masses(self.ffmol_list))
        my_lammps_list.append(
            self._set_pair_coeffs(self.ffmol_list))
        my_lammps_list.append(
            self._set_bond_coeffs(self.ffmol_list))
        my_lammps_list.append(
            self._set_angle_coeffs(self.ffmol_list))
        my_lammps_list.append(
            self._set_dihedral_coeffs(self.ffmol_list))
        my_lammps_list.append(
            self._set_improper_coeffs(self.ffmol_list))
        my_lammps_list.append(
            self._set_atom(self.ffmol_list))
        my_lammps_list.append(
            self._set_bonds(self.ffmol_list))
        my_lammps_list.append(
            self._set_angles(self.ffmol_list))
        my_lammps_list.append(
            self._set_dihedrals(self.ffmol_list))
        my_lammps_list.append(
            self._set_imdihedrals(self.ffmol_list))

        return '\n'.join(my_lammps_list)

    def write_data_file(self, filename=None):
        """
        write lammps data input file
        """
        with open(filename, 'w') as f:
            f.write(self.__str__())
