# coding: utf-8

from __future__ import division, print_function, unicode_literals, absolute_import

import unittest

from collections import OrderedDict

from pymatgen.core.structure import Molecule

from rubicon.io.force_field import ForceField
from rubicon.io.topology import Topology
from rubicon.io.lammps.data import LammpsForceFieldData


__author__ = 'Kiran Mathew'
__email__ = 'kmathew@lbl.gov'


class TestLammpsForceFieldData(unittest.TestCase):

    @classmethod
    def setUpClass(cls):
        atoms = OrderedDict([('hw', 'h'), ('ow', 'o')])
        bonds = OrderedDict([((u'hw', u'ow'), [553.0, 0.957]),
                             ((u'hw', u'hw'), [553.0, 1.513])])
        angles = OrderedDict([((u'hw', u'ow', u'hw'), [0.0, 104.52])])
        vdws = OrderedDict([(u'hw', [u'0.0000', u'0.0000']), (u'ow', [u'1.7683', u'0.1520'])])
        forcefield = ForceField(atoms, bonds, angles, vdws=vdws)
        h2o_coords = [[9.626, 6.787, 12.673],
                      [9.626, 8.420, 12.673],
                      [10.203, 7.604, 12.673]]
        h2o = Molecule(["H", "H", "O"], h2o_coords)
        # h2o, h-o, h-o, h=1, h=2, o=3
        top_atoms = [['h', 'hw'], ['o', 'ow']]
        top_bonds = [[1, 3, ('hw', 'ow')], [2, 3, ('hw', 'ow')]]
        top_angles = [[1, 3, 2, ('hw', 'ow', 'hw')]]
        topology = Topology(top_atoms, top_bonds, top_angles)
        mols = [h2o]
        mols_number = [1]
        box_size = [0, 0, 0, 10, 10, 10]
        molecule = h2o
        topologies = [topology]
        cls.lammps_ff_data = LammpsForceFieldData(mols, mols_number, box_size, molecule,
                                                  forcefield, topologies)

    def test_system_info(self):
        atomic_masses = [[1, 1.00794], [2, 1.00794], [3, 15.9994]]
        atoms_data = [[1, 1, 1, 0.0, 4.4875653445297559, 4.1830559491720365, 5.0000000000000018],
                      [2, 1, 1, 0.0, 4.4875653445297559, 5.8160559491720365, 5.0000000000000018],
                      [3, 1, 2, 0.0, 5.0645653445297558, 5.0000559491720367, 5.0000000000000018]]
        natom_types = 2
        natoms = 3
        nbond_types = 2
        nbonds = 2
        nangle_types = 1
        nangles = 1
        ndih_types = 0
        ndih = 0
        nimdih_types = 0
        nimdihs = 0
        self.assertEqual(self.lammps_ff_data.atomic_masses, atomic_masses)
        self.assertEqual(self.lammps_ff_data.atoms_data, atoms_data)
        self.assertEqual(self.lammps_ff_data.natom_types, natom_types)
        self.assertEqual(self.lammps_ff_data.natoms, natoms)
        self.assertEqual(self.lammps_ff_data.nbond_types, nbond_types)
        self.assertEqual(self.lammps_ff_data.nbonds, nbonds)
        self.assertEqual(self.lammps_ff_data.nangle_types, nangle_types)
        self.assertEqual(self.lammps_ff_data.nangles, nangles)
        self.assertEqual(self.lammps_ff_data.ndih_types, ndih_types)
        self.assertEqual(self.lammps_ff_data.ndih, ndih)
        self.assertEqual(self.lammps_ff_data.nimdih_types, nimdih_types)
        self.assertEqual(self.lammps_ff_data.nimdihs, nimdihs)


    def test_string_representation(self):
        string_rep = 'Data file generated by rubicon\n\n' \
                     '3 atoms\n' \
                     '2 bonds\n' \
                     '1 angles\n\n' \
                     '2 atom types\n' \
                     '2 bond types\n' \
                     '1 angle types\n\n' \
                     '0 10.0 xlo xhi\n' \
                     '0 10.0 ylo yhi\n' \
                     '0 10.0 zlo zhi\n\n' \
                     'Masses \n\n' \
                     '1 1.00794\n' \
                     '2 1.00794\n' \
                     '3 15.9994\n\n' \
                     'Pair Coeffs \n\n' \
                     '1 0.0000 0.0000\n' \
                     '2 1.7683 0.1520\n\n' \
                     'Bond Coeffs \n\n' \
                     '1 553.0 0.957\n' \
                     '2 553.0 1.513\n\n' \
                     'Angle Coeffs \n\n' \
                     '1 0.0 104.52\n\n' \
                     'Atoms \n\n' \
                     '1 1 1 0.0 4.48756534453 4.18305594917 5.0\n' \
                     '2 1 1 0.0 4.48756534453 5.81605594917 5.0\n' \
                     '3 1 2 0.0 5.06456534453 5.00005594917 5.0\n\n' \
                     'Bonds \n\n' \
                     '1 1 1 3\n' \
                     '2 1 2 3\n\n' \
                     'Angles \n\n' \
                     '1 1 1 3 2'
        self.assertEqual(str(self.lammps_ff_data), string_rep)



if __name__ == "__main__":
    unittest.main()
